// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)
// swift-module-flags: -target arm64-apple-ios14.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name MLYSDK
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AVFoundation
import AVKit
import CommonCrypto
import CoreTelephony
import CryptoKit
import Foundation
import GCDWebServer
@_exported import MLYSDK
import MUXSDKStats
import Sentry
import Swift
import SwiftCentrifuge
import SwiftProtobuf
import WebRTC
import _Concurrency
import _StringProcessing
@objc @_inheritsConvenienceInitializers @objcMembers public class MLYAVPlayerPlugin : ObjectiveC.NSObject {
  public var adapter: MLYSDK.MLYAVPlayerAdapter?
  @objc public func adapt(_ playerViewController: AVKit.AVPlayerViewController)
  @objc public func buildAssetPlayerItem(url: Foundation.URL) throws -> AVFoundation.AVPlayerItem
  @objc public func play(url: Foundation.URL)
  @objc public func notifyPlayerItemNewAccessLogEntry()
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class MLYAVPlayerAdapter {
  @objc deinit
}
@_hasMissingDesignatedInitializers public class AVPlayerTool {
  public static func bufferedTime(currentItem: AVFoundation.AVPlayerItem?) -> Swift.Double
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class MLYDriverOptions : ObjectiveC.NSObject {
  @objc public var client: MLYSDK.MLYClientOptions
  @objc public var server: MLYSDK.MLYServerOptions
  @objc public var debug: Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class MLYClientOptions : ObjectiveC.NSObject {
  @objc public var id: Swift.String?
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class MLYServerOptions : ObjectiveC.NSObject {
  @objc public var host: MLYSDK.MLYServerSetting
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class MLYServerSetting : ObjectiveC.NSObject {
  @objc public var fqdn: Swift.String?
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Point : Swift.Codable, Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
  public var x: Swift.String
  public var y: Swift.Int64
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class MLYChart {
  public static let shared: MLYSDK.MLYChart
  public var chart: [Swift.String : [MLYSDK.MLYCharPoint]]
  public var chartScore: [Swift.String : [MLYSDK.MLYCharPoint]]
  public func addDelegate()
  public func didDelegate()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class MLYCharPoint : Swift.Codable, Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
  public var char_x: Swift.String
  public var char_y: Swift.Double
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public class MLYData {
  public init()
  #if compiler(>=5.3) && $AsyncAwait
  public static func getClientPeer() async -> Swift.String
  #endif
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class MLYDriver : ObjectiveC.NSObject {
  @objc public static let VERSION: Swift.String
  @objc public static let MLYSERSION: Swift.String
  @objc override dynamic public init()
  @objc public static func initialize(_ closure: (MLYSDK.MLYDriverOptions) -> ()) throws
  @objc public static func activate() throws
  @objc public static func deactivate()
  @objc public static func test1()
  @objc public static func test2()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ProxyURLModifier {
  public static func replace(_ url: Swift.String) throws -> Foundation.URL
  @objc deinit
}
public enum ProxyURLModifierError : Swift.Error {
  case IllegalURLFormat
  case ExceptionInInitializerError
  public static func == (a: MLYSDK.ProxyURLModifierError, b: MLYSDK.ProxyURLModifierError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension MLYSDK.ProxyURLModifierError : Swift.Equatable {}
extension MLYSDK.ProxyURLModifierError : Swift.Hashable {}
